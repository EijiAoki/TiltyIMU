========== Cleanup ==========
Variable register values need to be re-worked to represent which need to be in updated_vars (and so updated post I2C message) and which can be updated on-the-fly (so as to remove them from updated_vars)

Interrupts could be more efficient (arduino goes through an if statement before running the function)

Direction change in ramping modes should get rid of digitalRead()

PID tuning could be optimized more

Should be able to individually enable/disable current sensing on each motor (add variable that's either 0x00 or 0x01 and use that as the toggle for the ADC ISR)

Make sure that default register identifiers stay neat (ongoing)

Implement pin change interrupt for other two encoder pins (low priority)

Setup current and encoder ready bits so they only set when data has changed



========== Features ==========
Add ability to read/write a motor from a register value by reading the whole struct (HIGH PRIORITY)
Add ability to read/write all control settings via a register value (HIGH PRIORITY)

Add a "kick" of higher power when going from < min_power to any value to get the motor turning

Watchdog checking/handling code (setup works just fine, as does resetting via watchdog)

Find something to fill the last spot in motor control register
Find something to fill the last two slots of EEPROM saving

Change data input to read data from a buffer instead of directly from I2C (I2C/Serial/SPI data goes into buffer, buffer gets passed to update functions, buffer is parsed as though data is directly from communications port)

Maybe add ticks per rotation and gear ratio back into registers for changeable encoder RPM readings

Make it so that current power can be read even in mapping/ramping/RPM modes when it is automatically set

Actually implement a way to read the "Who am I" value

Add one-shot reading of current if current register is accessed but auto-reading is disabled

Set up current sense so that reference voltage can be changed via I2C

Add ability to detect encoders and poll whether they're available via the master board

Custom slave only I2C for faster ISR servicing? (have to look at how Wire handles the code)


========== Fixes ==========
Motor doesn't start in ramping mode if direction was changed while stopped and brake enabled

Double encoder resolution setting doesn't work, each tick seems to cancel out the previous one

wireToVar for motor state needs to be tested